#!/usr/bin/python
# NumaConnect checker r1

import os, time, optparse
from nclib import Platform, Numachip, Northbridge

class Node:
	def write(self, bus, dev, fun, reg, val):
		numachip.mmcfg_raw_write(self.sci, bus, dev, fun, reg, val)

	def read(self, bus, dev, fun, reg):
		return numachip.mmcfg_raw_read(self.sci, bus, dev, fun, reg)

	def __init__(self, sci):
		self.sci = sci
		# assume NC is top HT
		self.nc_ht = (numachip.mmcfg_raw_read(sci, 0, 0x18, 0, 0x60) >> 4) & 7
		self.nbs = []

		# assume NBs below
		for ht in range(self.nc_ht):
			self.nbs.append(Northbridge(self.sci, ht))

	def log(self, ht, msg):
		msgstr = ' '
		# check for first error for HT
		if ht not in self.errors:
			msgstr += '- %03x#%u ' % (self.sci, ht)
			self.errors.append(ht)

		msgstr += msg
		print msgstr
		print >>logf, msgstr

	def ncensure(self, reg, expect):
		val = numachip.csr_raw_read(self.sci, numachip.regs[reg])
		if val != expect:
			self.log(self.nc_ht, '%s:%08x' % (reg, val))

	def nbensure(self, ht, reg, expect):
		reg = Northbridge.regs[reg]
		val = numachip.mmcfg_raw_read(self.sci, 0, 0x18 + ht, reg >> 12, reg & 0xfff)
		if val != expect:
			self.log(ht, '%s:%08x' % (reg, val))

	def mces(self, ht):
		statreg = Northbridge.regs['MC STATUS']
		status = numachip.mmcfg_raw_read(self.sci, 0, 0x18 + ht, statreg >> 12, statreg & 0xfff)
		status |= numachip.mmcfg_raw_read(self.sci, 0, 0x18 + ht, statreg >> 12, (statreg & 0xfff) + 4) << 32

#		status = 0xdc4540004d080813
		if not status & (1 << 63):
			return

		addrreg = Northbridge.regs['MC ADDR']
		addr = numachip.mmcfg_raw_read(self.sci, 0, 0x18 + ht, addrreg >> 12, addrreg & 0xfff)
		addr |= numachip.mmcfg_raw_read(self.sci , 0, 0x18 + ht, addrreg >> 12, (addrreg & 0xfff) + 4) << 32

#		addr = 0x00000018076cc000
		self.log(ht, self.nbs[ht].mce(status, addr))

	def check(self):
		self.errors = []

		try:
			ht = self.nc_ht

			self.ncensure('CDATA_ERROR_STATR', 0x00000000)
			self.ncensure('MCTAG_ERROR_STATR', 0x00000000)
			self.ncensure('ERROR_STATUS', 0x00000000)
			self.ncensure('ERROR_NFSTAT', 0x01000100)
			self.ncensure('ERROR_FSTAT', 0x00000000)

			if platform.oemn.size_x:
				self.ncensure('HSSXA_STAT_1', 0x00000100)
				self.ncensure('HSSXB_STAT_1', 0x00000100)
				self.ncensure('PHYXA_ELOG', 0x00000000)
				self.ncensure('PHYXB_ELOG', 0x00000000)
				self.ncensure('PHYXA_LINK_STAT', 0x00001fff)
				self.ncensure('PHYXB_LINK_STAT', 0x00001fff)

			if platform.oemn.size_y:
				self.ncensure('HSSYA_STAT_1', 0x00000100)
				self.ncensure('HSSYB_STAT_1', 0x00000100)
				self.ncensure('PHYYA_ELOG', 0x00000000)
				self.ncensure('PHYZB_ELOG', 0x00000000)
				self.ncensure('PHYYA_LINK_STAT', 0x00001fff)
				self.ncensure('PHYYB_LINK_STAT', 0x00001fff)

			if platform.oemn.size_z:
				self.ncensure('HSSZA_STAT_1', 0x00000100)
				self.ncensure('HSSZB_STAT_1', 0x00000100)
				self.ncensure('PHYZA_ELOG', 0x00000000)
				self.ncensure('PHYZB_ELOG', 0x00000000)
				self.ncensure('PHYZA_LINK_STAT', 0x00001fff)
				self.ncensure('PHYZB_LINK_STAT', 0x00001fff)

			if not options.lean:
				for ht in range(self.nc_ht):
					self.mces(ht)
					self.nbensure(ht, 'DRAM HOT', 0x00000000)

		except Numachip.TimeoutException:
			self.log(ht, 'timeout')
			return
		except Numachip.HTErrorException:
			self.log(ht, 'HT error')
			return
		except Numachip.BlockedException:
			self.log(ht, 'blocked')
			return

### start

if os.getuid():
	raise SystemExit('error: please run as root')

parser = optparse.OptionParser()
parser.add_option('--verbose', dest='verbose', default=0, action='count', help='increase verbosity')
parser.add_option('--once', dest='once', action='store_true', default=False, help='check once rather than periodically')
parser.add_option('--lean', dest='lean', action='store_true', default=False, help='check numachip registers only')
parser.add_option('--local', dest='local', action='store_true', default=False, help='check local registers only')

options, args = parser.parse_args()
verbose = options.verbose

platform = Platform()
numachip = Numachip(platform)

colours = {
	'default':  '\033[0m',
	'warning':  '\033[33m', # yellow
	'error':    '\033[31m', # red
	'good':     '\033[32m', # green
}

nodes = []

for z in range(max(platform.oemn.size_z, 1)):
	for y in range(max(platform.oemn.size_y, 1)):
		for x in range(max(platform.oemn.size_x, 1)):
			nodes.append(Node(x | y << 4 | z << 8))

logf = open('nc-check.log', 'a')

try:
	while True:
		timestr = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
		print timestr
		print >>logf, timestr

		errors = 0
		for node in nodes:
			node.check()

		if options.once:
			break

		time.sleep(3)
except KeyboardInterrupt:
	pass
