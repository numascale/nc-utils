#!/usr/bin/python
# NumaConnect checker r11

import os, time, optparse, operator
from nclib import Platform, Numachip, Node

if os.getuid():
	raise SystemExit('error: please run as root')

parser = optparse.OptionParser()
parser.add_option('--verbose', dest='verbose', default=0, action='count', help='increase verbosity')
parser.add_option('--once', dest='once', action='store_true', default=False, help='check once rather than periodically')
parser.add_option('--lean', dest='lean', action='store_true', default=False, help='check numachip registers only')
parser.add_option('--local', dest='local', action='store_true', default=False, help='check local registers only')

options, args = parser.parse_args()

platform = Platform()
numachip = Numachip(platform)

colours = {
	'default':  '\033[0m',
	'warning':  '\033[33m', # yellow
	'error':    '\033[31m', # red
	'good':     '\033[32m', # green
}

nodes = []

try:
	for z in range(max(platform.oemn.size_z, 1)):
		for y in range(max(platform.oemn.size_y, 1)):
			for x in range(max(platform.oemn.size_x, 1)):
				nodes.append(Node(x | y << 4 | z << 8, numachip, platform.oemn, options.lean))

	logf = open('nc-check.log', 'a')
except Numachip.BlockedException:
	raise SystemError('error: fabric blocked; unable to determine geometry')

try:
	while True:
		output = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
		if options.verbose > 0:
			output += ' ['

		if options.verbose > 0:
			ptrs = {}
			total = 0
			for node in nodes:
				ptr = node.state()
				if ptr:
					try:
						ptrs[ptr] += 1
					except KeyError:
						ptrs[ptr] = 1
					total += 1

			for key, val in sorted(ptrs.items(), key=operator.itemgetter(1), reverse=True):
				output += '%2u%%@%03x' % (val * 100 / total, key),
			output += ']'

		errors = 0
		for node in nodes:
			errstr = node.check()
			if errstr:
				output += ' ' + errstr

		print output
		print >>logf, output

		if options.once:
			break

		time.sleep(3)
except Numachip.TimeoutException:
	raise SystemError('error: fabric timeout')
except Numachip.BlockedException:
	raise SystemError('error: fabric blocked')
except KeyboardInterrupt:
	pass
