#!/usr/bin/python
# NumaConnect diagnostics r28

import os, time, optparse, random
from nclib import Platform, Numachip, en

class Node:
	def write(self, bus, dev, fun, reg, val):
		self.numachip.mmcfg_raw_write(self.sci, bus, dev, fun, reg, val)

	def read(self, bus, dev, fun, reg):
		return self.numachip.mmcfg_raw_read(self.sci, bus, dev, fun, reg)

	def device(self, bus, dev, fn, typ):
		vendev = self.read(bus, dev, fn, 0x0)
		print '%x:%02x.%x %04x:%04x' % (bus, dev, fn, vendev & 0xffff, vendev >> 16),

		if typ == 0x00:
			print 'endpoint',
		elif typ == 0x01:
			print 'bridge  ',

		status = self.read(bus, dev, fn, 0x4) >> 16
		print '<ParErr%s <SysErr%s <MAbort%s <TAbort%s >TAbort%s MParErr%s Int%s' % \
		  (en(status, 15), en(status, 14), en(status, 13), en(status, 12), en(status, 11), \
		  en(status, 8), en(status, 3))

		if typ == 0x01: # bridge
			s = self.read(bus, dev, fn, 0x1c) >> 16
			print '                 sec      <ParErr%s <SysErr%s <MAbort%s <TAbort%s >TAbort%s MParErr%s' % \
			  (en(s, 15), en(s, 14), en(s, 13), en(s, 12), en(s, 11), en(s, 8))
			sec = (self.read(bus, dev, fn, 0x18) >> 8) & 0xff
			self.walk(sec)

	def walk(self, bus):
		# workaround Numachip bus decode bug
		if bus == 0:
			lim = 0x18
		else:
			lim = 0x20

		for dev in range(lim):
			for fn in range(8):
				try:
					val = self.read(bus, dev, fn, 0xc)
				except Numachip.HTErrorException:
					continue
				except Numachip.AddressDecodeException:
					break
				except Numachip.TimeoutException:
					print 'SCI%03x %x:%02x.%x timeout; aborting' % (self.sci, bus, dev, fn)
					raise SystemExit
				except Numachip.BlockedException:
					print 'SCI%03x blocked' % self.sci
					return

				if val == 0xffffffff:
					continue

				self.device(bus, dev, fn, (val >> 16) & 0x7f)

				# check if multifunction
				if fn == 0 and not val & 0x800000:
					break

	def walk_pci(self):
		print '\nPCI hierarchy on SCI%03x:' % self.sci
		self.walk(0)

	def __init__(self, sci, numachip, settings):
		self.sci = sci
		self.settings = settings
		self.numachip = numachip

		if self.settings.standalone:
			ids = self.numachip.mmcfg_raw_read(sci, 0, 0x18, 0, 0x60)
			ht_max = (ids >> 4) & 7
			self.renumbering = 0
		else:
			try:
				self.nc_ht = self.numachip.csr_raw_read(sci, Numachip.G3_HT_NODEID) & 7
				self.renumbering = self.nc_ht == 0
				ids = self.numachip.mmcfg_raw_read(sci, 0, 0x18 + self.nc_ht, 0, 0xc8)
				ht_max = (ids >> 8) & 7
				if options.verbose:
					print 'SCI%03x: ids=%08x nc_ht=%d renumbering=%d ht_max=%d' % (self.sci, ids, self.nc_ht, self.renumbering, ht_max)
			except Numachip.TimeoutException:
				print 'SCI%03x timeout; assuming 0 HT nodes' % self.sci
				self.renumbering = 0
				ht_max = 0

		if self.renumbering:
			self.northbridge_ids = [ht_max, ] + [n for n in range(1, ht_max)]
		else:
			self.northbridge_ids = [n for n in range(ht_max)]
		if options.verbose:
			print 'SCI%03x NBs %s' % (self.sci, self.northbridge_ids)

	def disable_syncflood(self):
		for nb in self.northbridge_ids:
			for link in range(4):
				val = self.read(0, 0x19 + nb, 3, 0x84 + link * 0x20)
				val &= ~(1 << 1) # CrcFloodEn
				self.write(0, 0x18 + nb, 3, 0x84 + link * 0x20, val)

			val = self.read(0, 0x18 + nb, 3, 0x44)
			val &= ~(1 << 30) # SyncFloodOnDramAdrParErr
			val &= ~(1 << 21) # SyncFloodOnAnyUcErr
			val &= ~(1 << 20) # SyncFloodOnWDT
			val &= ~(1 << 4) # SyncPktPropDis
			val &= ~(1 << 3) # SyncPktGenDis
			val &= ~(1 << 2) # SyncFloodOnDramUcEcc
			self.write(0, 0x18 + nb, 3, 0x44, val)

			val = self.read(0, 0x18 + nb, 3, 0x180)
			val &= ~(1 << 22) # SyncFloodOnTblWalkErr
			val &= ~(1 << 21) # SyncFloodOnCpuLeakErr
			val &= ~(1 << 20) # SyncFloodOnL3LeakErr
			val &= ~(1 << 9) # SyncFloodOnUCNbAry
			val &= ~(1 << 8) # SyncFloodOnProtErr
			val &= ~(1 << 7) # SyncFloodOnTgtAbortErr
			val &= ~(1 << 6) # SyncFloodOnDatErr
			val &= ~(1 << 1) # SyncFloodOnUsPwDatErr
			val = self.write(0, 0x18 + nb, 3, 0x180, val)

	def correctable(self):
		for nb in self.northbridge_ids:
			val = self.read(0, 0x18 + nb, 3, 0x44)
			val |= 1 << 26 # FlagMcaCorrErr
			self.write(0, 0x18 + nb, 3, 0x44, val)

	def inject_dram(self):
		if options.northbridges == -1:
			nb = random.choice(self.northbridge_ids)
		else:
			nb = int(random.choice(options.northbridges.split(',')))

		quad = random.randint(0, 3)

		val = (8 << 28) | (quad << 1)
		self.write(0, 0x18 + nb, 3, 0xb8, val)

		val2 = (1 << random.randint(0, 15)) | (1 << 17)

		for _ in range(options.bits):
			val2 |= 1 << random.randint(20, 28)

		self.write(0, 0x18 + nb, 3, 0xbc, val2)

	def inject_link(self):
		nb = random.choice(self.northbridge_ids)
		link = random.randint(0, 3)

		val = self.read(0, 0x18 + nb, 3, 0x44)
		val = (val & ~(0x3f << 14)) | (1 << 16) | (link << 14)
		self.write(0, 0x18 + nb, 3, 0x44, val)

class Nodes:
	colours = {
		'default':  '\033[0m',
		'warning':  '\033[33m', # yellow
		'error':    '\033[31m', # red
		'good':     '\033[32m', # green
	}

	ncregs = (
		# name              group    reg        mask       value
		('SEQ_INFO',            0, 0xc34, 0x00000000, 0x00000000),
		('CDATA_ERROR_STATR',   4, 0xf0c, 0xffffffff, 0x00000000),
		('MCTAG_ERROR_STATR',   4, 0x70c, 0xffffffff, 0x00000000),
		('ERROR_STATUS',        3, 0x424, 0xffffffff, 0x00000000),
		('ERROR_NFSTAT',        0, 0xd20, 0xffffffff, 0x01000100),
		('ERROR_FSTAT',         0, 0xd10, 0xffffffff, 0x00000000),
		('HSSXA_STAT_1',        0, 0xa30, 0xffffffff, 0x00000100),
		('HSSXB_STAT_1',        0, 0xa70, 0xffffffff, 0x00000100),
		('HSSYA_STAT_1',        0, 0xab0, 0xffffffff, 0x00000100),
		('HSSYB_STAT_1',        0, 0xaf0, 0xffffffff, 0x00000100),
		('HSSZA_STAT_1',        0, 0xb30, 0xffffffff, 0x00000100),
		('HSSZB_STAT_1',        0, 0xb70, 0xffffffff, 0x00000100),
		('PHYXA_ELOG',          0, 0xa08, 0xffffffff, 0x00000000),
		('PHYXB_ELOG',          0, 0xa48, 0xffffffff, 0x00000000),
		('PHYYA_ELOG',          0, 0xa88, 0xffffffff, 0x00000000),
		('PHYYB_ELOG',          0, 0xac8, 0xffffffff, 0x00000000),
		('PHYZA_ELOG',          0, 0xb08, 0xffffffff, 0x00000000),
		('PHYZB_ELOG',          0, 0xb48, 0xffffffff, 0x00000000),
		('PHYXA_LINK_STAT',     0, 0xa00, 0xffffffff, 0x00001fff),
		('PHYXB_LINK_STAT',     0, 0xa40, 0xffffffff, 0x00001fff),
		('PHYYA_LINK_STAT',     0, 0xa80, 0xffffffff, 0x00001fff),
		('PHYYB_LINK_STAT',     0, 0xac0, 0xffffffff, 0x00001fff),
		('PHYZA_LINK_STAT',     0, 0xb00, 0xffffffff, 0x00001fff),
		('PHYZB_LINK_STAT',     0, 0xb40, 0xffffffff, 0x00001fff),
	)

	nbregs = (
		('MC STATUS L',         3, 0x48,  0xffffffff, 0x00000000),
		('MC STATUS H',         3, 0x4c,  0xffffffff, 0x00000000),
		('MC ADDR L',           3, 0x50,  0xffffffff, 0x00000000),
		('MC ADDR H',           3, 0x54,  0xffffffff, 0x00000000),
		('DRAM ERRORS',         3, 0x160, 0x00000fff, 0x00000000),
		('LINK ERRORS',         3, 0x168, 0x00000fff, 0x00000000),
		('ONLINE SPARE',        3, 0xb0,  0xffe0ffff, 0x00000000),
		('L3C ERRORS',          3, 0x170, 0x00000fff, 0x00000000),
		('LINK 0 RETRIES',      0, 0x130, 0xffffff3e, 0x00000000),
		('LINK 1 RETRIES',      0, 0x134, 0xffffff3e, 0x00000000),
		('LINK 2 RETRIES',      0, 0x138, 0xffffff3e, 0x00000000),
		('LINK 3 RETRIES',      0, 0x13c, 0xffffff3e, 0x00000000),
		('DRAM HOT',            2, 0xac,  0xffffffff, 0x00000000),
	)

	def northbridges(self):
		hts = ((self.numachip.mmcfg_raw_read(0xfff0, 0, 0x18, 0, 0x60) >> 4) & 7) + 1
		count = 0

		for ht in range(hts):
			if self.numachip.mmcfg_raw_read(0xfff0, 0, 0x18 + ht, 0, 0) & 0xffff == 0x1022:
				count += 1

		return count

	def __init__(self, platform):
		self.numachip = Numachip(platform)
		self.settings = platform.oemn
		self.last_colour = 0

		# no NumaConnect
		if self.settings.standalone:
			self.settings.northbridges = self.northbridges()
			self.nodes = [Node(0xfff0, self.numachip, self.settings),]
			return

		if options.local:
			self.nodes = [Node(self.numachip.own, self.numachip, self.settings),]
			return

		# cluster
		self.nodes = []

		for z in range(max(self.settings.size_z, 1)):
			for y in range(max(self.settings.size_y, 1)):
				for x in range(max(self.settings.size_x, 1)):
					node = Node(x | y << 4 | z << 8, self.numachip, self.settings)
					self.nodes.append(node)

	def colour(self, name):
		if self.last_colour == name:
			return ''

		self.last_colour = name
		return self.colours[name]

	def interpret(self, val, mask, ideal):
		if val & mask != ideal:
			print '%s%08x%s' % (self.colour('error'), val, self.colour('default')),
		else:
			print '%08x'% val,

	def status(self):
		print '%20s' % time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()),
		for node in self.nodes:
			print '     %03X' % node.sci,
		print

		if not self.settings.standalone:
			for name, fn, reg, mask, ideal in self.ncregs:
				print '%20s' % name,

				for node in self.nodes:
					try:
						val = node.numachip.csr_raw_read(node.sci, (fn << 12) | reg)
						self.interpret(val, mask, ideal)
					except Numachip.TimeoutException:
						print ' TIMEOUT',
					except Numachip.HTErrorException:
						print ' HTERROR',
				print

		if not options.lean:
			for name, fn, reg, mask, ideal in self.nbregs:
				# account for highest number of HD IDs
				limit = max([len(node.northbridge_ids) for node in self.nodes])
				for nb in range(limit):
					print '%16s NB%d' % (name, nb),

					for node in self.nodes:
						try:
							val = node.read(0, 0x18 + node.northbridge_ids[nb], fn, reg)
							self.interpret(val, mask, ideal)
						except Numachip.TimeoutException:
							print ' TIMEOUT',
						except Numachip.HTErrorException:
							print ' HTERROR',
						except Numachip.BlockedException:
							print ' BLOCKED',
						except IndexError:
							print ' MISSING',
					print

			if self.settings.remote_io:
				for node in self.nodes:
					node.walk_pci()
			else:
				# assume SCI000 is the master for now
				self.nodes[0].walk_pci()

	def disable_syncflood(self):
		print 'disabling sync flood generation...',
		for node in self.nodes:
			node.disable_syncflood()

		print 'done'

	def correctable(self):
		print 'enabling correctable error reporting...',
		for node in self.nodes:
			node.correctable()

		print 'done'

	def inject_dram(self, count):
		print 'injecting %d correctable DRAM errors...' % count,
		for _ in range(count):
			if options.node != -1:
				node = self.nodes[options.node]
			else:
				node = random.choice(self.nodes)

			node.inject_dram()

			if options.rate:
				time.sleep(1. / options.rate)

		print 'done'

	def inject_link(self, count):
		print 'injecting %d link errors...' % count,
		for _ in range(count):
			if options.node != -1:
				node = self.nodes[options.node]
			else:
				node = random.choice(self.nodes)

			node.inject_link()

			if options.rate:
				time.sleep(1. / options.rate)

		print 'done'

### start

if os.getuid():
	raise SystemExit('error: please run as root')

parser = optparse.OptionParser()
parser.add_option('--rate', dest='rate', type='int', default=100, help='rate of error injection in errors per second (0 = no delays; default 100)')
parser.add_option('--report-correctable', dest='correctable', action='store_true', default=False, help='report correctable errors')
parser.add_option('--disable-syncflood', dest='syncflood', action='store_true', default=False, help='disable syncflood generation')
parser.add_option('--node', dest='node', type='int', default=-1, help='node to inject errors into (-1 = all)')
parser.add_option('--northbridges=', dest='northbridges', type='string', default=-1, help='comma separated list of northbridges to inject errors into (-1 = all)')
parser.add_option('--inject-dram', dest='inject_dram', type='int', default=0, help='inject DRAM errors')
parser.add_option('--bits', dest='bits', type='int', default=1, help='bits to corrupt per word (default 1)')
parser.add_option('--inject-link', dest='inject_link', type='int', default=0, help='inject link errors')
parser.add_option('--verbose', dest='verbose', default=0, action='count', help='increase verbosity')
parser.add_option('--monitor', dest='monitor', action='store_true', default=False, help='redraw data every 4s')
parser.add_option('--lean', dest='lean', action='store_true', default=False, help='check numachip registers only')
parser.add_option('--local', dest='local', action='store_true', default=False, help='check local registers only')

options, args = parser.parse_args()
verbose = options.verbose

random.seed(42)

p = Platform()
n = Nodes(p)

if options.syncflood:
	n.disable_syncflood()

if options.correctable:
	n.correctable()

try:
	if options.inject_dram:
		n.inject_dram(options.inject_dram)

	if options.inject_link:
		n.inject_link(options.inject_link)
except KeyboardInterrupt:
	print 'stopping'

if options.monitor:
	print '\033\143'

	while True:
		print '\033[;f'
		n.status()
		time.sleep(4)
else:
	n.status()
