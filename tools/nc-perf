#!/usr/bin/python
# NumaConnect performance monitoring r2

import os, sys, time, struct, optparse, fcntl, termios
from nclib import Platform, Numachip

# Select = 0, REM/SPrb:
#  7 SCC-Request Invalidate     (shared   => invalid)
#  6 SCC-Request Read      (modified => shared)
#  5 SCC-Request Read and Invalidate (modified => invalid)
#  4 SCC-Request Aliased Invalidate  (shared   => invalid)
#  3 SCC-Request Aliased Read and Invalidate (modified => invalid)
#  2 SCC-Request with SPrb conflict
#  1 SCC-Request with HReq conflict
#  0 Cache data access
#
# Select = 1, REM/HReq:
#  7 HT-Request start processing
#  6 HT-Request with ctag miss
#  5 HT-Request with ctag hit
#  4 HT-Request with HReq conflict
#  3 HT-Request with SPrb conflict
#  2 HT-command unknown
#  1 Broadcast messages
#  0 Direct interrupt (no broadcast)
#
# Select = 2, LOC/SReq:
#  7 Interrupt request
#  6 Config Space request
#  5 VictimBlk request
#  4 VictimBlk conflict
#  3 SCC conflict
#  2 SCC discard
#  1 SCC request (all)
#  0 Error in interrupt
#
# Select = 3, LOC/HPrb:
#  7 HT lock pending
#  6 VictimBlk conflict
#  5 HT-probe with next-state=invalidate
#  4 SCC retries
#  3 SCC requests
#  2 HT-probe on own request
#  1 HT-probe with next-state=shared
#  0 HT-probe to non-shared memory
#
# Select = 4, CData:
#  7 CData write request from REM/HReq
#  6 CData write request from REM/HReq accepted
#  5 CData read request from REM/HReq
#  4 CData read request from REM/HReq accepted
#  3 CData write request from REM/SPrb
#  2 CData write request from REM/SPrb accepted
#  1 CData read request from REM/SPrb
#  0 CData read request from REM/SPrb accepted
#
# Select = 5, FTag:
#  7 Tag update valid from MCTag
#  6 Tag read valid from MCTag
#  5 MCTag request
#  4 Tag response valid from MCTag to LOC/HPrb
#  3 Unused
#  2 Tag response valid from prefetch to LOC/HPrb
#  1 Unused
#  0 Tag request from LOC/HPrb
#
# Select = 6, MCTag:
#  7 Unused
#  6 Prefetch buffer address hit
#  5 Prefetch buffer full hit
#  4 Tag request from REM/HReq
#  3 CTag cache hit
#  2 CTag cache miss
#  1 DRAM read request
#  0 DRAM read request delayed
#
# Select = 7, cHT-Cave:
#  7 Outgoing HT-Probe
#  6 Outgoing HT-Response
#  5 Outgoing posted HT-Request
#  4 Outgoing non-posted HT-Request
#  3 Incoming HT-Probe
#  2 Incoming HT-Response
#  1 Incoming posted HT-Request
#  0 Incoming non-posted HT-Request

class Heatmap:
	# 40=black 41=red 42=green 43=yellow 44=blue 45=purple 46=cyan 47=white
	colours = ('\033[40m', '\033[46m', '\033[44m', '\033[42m', '\033[45m', '\033[41m', '\033[43m', '\033[47m')
	normal = '\033[0m'

	def __init__(self, platform):
		self.settings = platform.oemn
		self.numachip = Numachip(platform)
		self.scis = []

		for z in range(max(self.settings.size_z, 1)):
			for y in range(max(self.settings.size_y, 1)):
				for x in range(max(self.settings.size_x, 1)):
					self.scis.append(x | (y << 4) | (z << 8))

		# detect terminal size
		res = fcntl.ioctl(0, termios.TIOCGWINSZ, struct.pack('HHHH', 0, 0, 0, 0))
		self.term_height, self.term_width = struct.unpack('HHHH', res)[:2]
		self.count = min(8, self.term_width / len(self.scis))

	def banner(self, event):
		print '\n%s (%s):' % (event['name'], event['units']),
		for i in range(len(self.colours)):
			print '%s  %s %d' % (self.colours[i], self.normal, event['limit'] * i / (len(self.colours) - 1)),
		print self.normal

	def heat(self, val, event):
		i = min(int(val / float(event['limit']) * len(self.colours)), len(self.colours) - 1)
		sys.stdout.write(self.colours[i] + ' ' * self.count)

	def reset(self, sci, event):
		try:
			self.numachip.csr_raw_write(sci,
				Numachip.G3_PERFORMANCE_COUNTER_0_40_BIT_UPPER_BITS + event['counter'] * 8, 0)
			self.numachip.csr_raw_write(sci,
				Numachip.G3_PERFORMANCE_COUNTER_0_40_BIT_LOWER_BITS + event['counter'] * 8, 0)
		except Numachip.TimeoutException:
			print 'T',

	def arm(self, sci, event):
		# write compare bits the same as mask bits to select only this event
		mask = event['mask'] | (event['mask'] << 8)
		self.numachip.csr_raw_write(sci, Numachip.G3_COMPARE_AND_MASK_OF_COUNTER_0 + event['counter'] * 4, mask)
		self.reset(sci, event)

	def collect(self, sci, event):
		try:
			val = self.numachip.csr_raw_read(sci,
				Numachip.G3_PERFORMANCE_COUNTER_0_40_BIT_UPPER_BITS + event['counter'] * 8) << 32
			val |= self.numachip.csr_raw_read(sci,
				Numachip.G3_PERFORMANCE_COUNTER_0_40_BIT_LOWER_BITS + event['counter'] * 8)
		except Numachip.TimeoutException:
			print 'T',
			return 0

		self.reset(sci, event)
		return val

	def performance(self, event):
		for sci in self.scis:
			self.arm(sci, event)

		while True:
			self.banner(event)

			for _ in range(self.term_height - 4):
				for sci in self.scis:
					val = self.collect(sci, event)
					self.heat(val, event)
				print self.normal
				time.sleep(0.5)

def usage():
	print 'usage: nc-perf <event>'
	print 'performance events:'
	for event in Numachip.events:
		print event['name']
	raise SystemExit

### start

if os.getuid():
	print 'error: please run as root'
	raise SystemExit

parser = optparse.OptionParser()
parser.add_option('--verbose', dest='verbose', default=0, action='count', help='increase verbosity')
options, args = parser.parse_args()
verbose = 2 # options.verbose

if len(args) != 1:
	usage()

event = [x for x in Numachip.events if x['name'] == args[0]]
if not event:
	usage()

p = Platform()
h = Heatmap(p)
try:
	h.performance(event[0])
except KeyboardInterrupt:
	# reset console background colour
	print Heatmap.normal
